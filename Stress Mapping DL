import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, concatenate, Dense, Flatten, BatchNormalization
from tensorflow.keras.models import Model

def deformation_encoder(input_shape):
    inputs = Input(shape=input_shape)
    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same')(inputs)
    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv1)
    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)
    
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same')(pool1)
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv2)
    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)
    
    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same')(pool2)
    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same')(conv3)
    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)
    
    conv4 = Conv2D(512, (3, 3), activation='relu', padding='same')(pool3)
    conv4 = Conv2D(512, (3, 3), activation='relu', padding='same')(conv4)
    
    return Model(inputs, conv4, name='deformation_encoder')

def stress_decoder(input_shape):
    inputs = Input(shape=input_shape)
    up1 = UpSampling2D(size=(2, 2))(inputs)
    conv1 = Conv2D(256, (3, 3), activation='relu', padding='same')(up1)
    conv1 = Conv2D(256, (3, 3), activation='relu', padding='same')(conv1)
    
    up2 = UpSampling2D(size=(2, 2))(conv1)
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same')(up2)
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv2)
    
    up3 = UpSampling2D(size=(2, 2))(conv2)
    conv3 = Conv2D(64, (3, 3), activation='relu', padding='same')(up3)
    conv3 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv3)
    
    conv4 = Conv2D(1, (1, 1), activation='sigmoid')(conv3)
    
    return Model(inputs, conv4, name='stress_decoder')

def force_decoder(latent_dim):
    inputs = Input(shape=(latent_dim,))
    dense1 = Dense(128, activation='relu')(inputs)
    dense2 = Dense(64, activation='relu')(dense1)
    dense3 = Dense(32, activation='relu')(dense2)
    dense4 = Dense(8, activation='relu')(dense3)
    outputs = Dense(2)(dense4)
    
    return Model(inputs, outputs, name='force_decoder')

def build_model(input_shape, latent_dim):
    input_image = Input(shape=input_shape, name='input_image')
    deformation_encoder_model = deformation_encoder(input_shape)
    stress_decoder_model = stress_decoder(deformation_encoder_model.output_shape[1:])
    force_decoder_model = force_decoder(latent_dim)
    
    encoded_features = deformation_encoder_model(input_image)
    stress_map_output = stress_decoder_model(encoded_features)
    force_output = force_decoder_model(Flatten()(encoded_features))
    
    model = Model(inputs=input_image, outputs=[stress_map_output, force_output], name='full_model')
    return model

# Define input shape and latent dimension
input_shape = (256, 256, 3)  # Example input shape
latent_dim = 512  # Example latent dimension

# Build the model
full_model = build_model(input_shape, latent_dim)

# Print model summary
full_model.summary()
